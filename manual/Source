<document title="ManTools">
<define name="version" value="">
<define name="date" value="" length=30 align="right">




<literal mode="Text">
=============================================================================
ManTools - Application manual creation tools                     Version $$version$$

(C) Stephen Fryatt, 2002-2017                  $$date$$
=============================================================================
</literal>





<chapter title="License" file="License">

<cite>ManTools</cite> are licensed under the EUPL, Version&nbsp;1.2 only (the "Licence"); you may not use this work except in compliance with the Licence.

You may obtain a copy of the Licence at <link ref="#url http://joinup.ec.europa.eu/software/page/eupl">http://joinup.ec.europa.eu/software/page/eupl</link>

Unless required by applicable law or agreed to in writing, software distributed under the Licence is distributed on an &quot;<strong>as is</strong>&quot; basis, <strong>without warranties or conditions of any kind</strong>, either express or implied.

See the Licence for the specific language governing permissions and limitations under the Licence.

The source for <cite>ManTools</cite> can be found alongside this binary download, at <link ref="#url http://www.stevefryatt.org.uk/software">http://www.stevefryatt.org.uk/software</link>

</chapter>





<chapter title="Introduction" file="Introduction">

<cite>ManTools</cite> are a set of Perl scripts intended for generating StrongHelp, HTML, DDF and plain text help files from a single source file.  The intention is to make it easier to supply a both plain text and formatted versions of software manuals.  The markup options available have a strong bias towards creating documentation for ROSC&nbsp;OS software.

To use the scripts natively on RISC&nbsp;OS, a copy of Perl&nbsp;5 will be required. At the time of writing, a copy can be found at <link ref="#url http://www.cp15.org/perl/">http://www.cp15.org/perl/</link>. The scripts are command-line based, and should be installed in a library or called by their full pathname.

</chapter>





<chapter title="Command Line Use" file="Use">

The scripts that comprise <cite>ManTools</cite> are <cite>TextMan</cite>, <cite>StrongMan</cite>, <cite>HTMLMan</cite> and <cite>DDFMan</cite>. Each script takes the same parameters on the command line, and in their simplest form should be called with the syntax:

<command>textman &lt;infile&gt; &lt;outfile&gt;</command>

This two-parameter format is provided for backwards compatibility. If constants are required to be defined by the called (such as in a Makefile, then then an alternative syntax is provided:

<command>textman -I&lt;infile&gt; -O&lt;outfile&gt; -D&lt;constant&gt;=&lt;value&gt;</command>

This allows constants to be defined externally from the script (maybe for things such as creation date or build version). If multiple constants are required, more than one <code>-D</code> parameter can be supplied to the script.


<subhead title="Output types">

<cite>ManTools</cite> manuals are formed from a sequence of blocks and chapters: how these are used by a script depends upon its output format. The text, HTML and DDF scripts generate a single file in the target format which contains all of the applicable blocks in sequence. The StrongHelp script creates a folder with the name of the output file, and saves each part of the source into a separate file within it; a separate tool (such as BindHelp or StrongHelp itself) will be required to turn these files into a finished manual.

How individual output formats handle aspects of the markup will depend on their capabilities. Individual scripts are free to ignore tags and entities which they can not process sensibly: for example, while <code>&lt;file&gt;...&lt;/file&gt;</code> might create italic text in an HTML document, it will have no visible effect in a text manual.

</chapter>





<chapter title="Markup language" file="Markup">

The markup tags used by <cite>ManTools</cite> are similar to HTML, but the whole structure is simplified and with a less rigorous structure.  All tags are enclosed in angle brackets (like &lt;this&gt;) and reserved characters are inserted using the standard entities starting with ampersand. Recognised entities are:

<list>
<li><code>&amp;lt;</code> &ndash; &lt;
<li><code>&amp;gt;</code> &ndash; &gt;
<li><code>&amp;amp;</code> &ndash; &amp;
<li><code>&amp;quot;</code> &ndash; &quot;
<li><code>&amp;ndash;</code> &ndash; n-dash (&ndash;)
<li><code>&amp;nbsp;</code> &ndash; non-breaking space
<li><code>&amp;msep;</code> &ndash; menu item separator
</list>

Note the RISC&nbsp;OS-specific <code>&amp;msep;</code>, which is used to signify the separation between levels of a hierarchical menu.

Unlike in HTML, paragraphs are not enclosed in <code>&lt;p&gt; ... &lt;/p&gt;</code> tags.  Instead, each paragraph must be on one line in the file, with one or more newlines at the end. Using a text editor that supports soft-wrap (ie. not <cite>Edit</cite>) will help to make this easier.

Two types of tag are defined: inline tags and block tags.  Inline tags appear within the text of a paragraph &lt;em&gt;like this&lt;/em&gt; and apply formatting to all or part of that line. They can not span across more than one paragraph.  Block tags, on the other hand, appear on lines of their own

<codeblock>
&lt;codeblock&gt;
like this
&lt;/codeblock&gt;
</codeblock>

and provide structure to the document. Their contents can include one or more paragraphs, as required; they may also affect the formatting of the output.


<subhead title="General document structure">

A <cite>ManTools</cite> document starts with block tags defining details of the document itself and setting constants to be used elsewhere. Following on from these, the source contains a sequence of chapters and literal blocks. Chapters are written out to all outputs, laid out appropriately to take into account the capabilities of the target format. Literal blocks are written out unchanged, if the target format matches that to which the block is attached.

The intention is that chapters are used to hold the majority of the manual's content, while literal blocks can be used to set up areas such as the start and end of the document where more precise control of the output is required. In the case of multi-file formats like StrongHelp, literal blocks can also be used to hold additional files such as configuration data.


<subhead title="Document header and constants">

Every source file must start with the &lt;document&nbsp;...&gt; tag, which gives details of the manual being created.

<definition target="&lt;document&nbsp;...&gt;">
The <code>&lt;document&nbsp;...&gt;</code> tag appears at the top of a document, at the block level. It supplies details about that document, and is not closed.

The defined attributes are:

<list>
<li><code>title</code>: the title of the document.  Used to prefix chapter titles in <cite>StrongHelp</cite> title-bars.
</list>
</definition>

The &lt;document&nbsp;...&gt; tag is followed by any constant definitions which are required by the rest of the manual.

<definition target="&lt;define&nbsp;...&gt;">
The <code>&lt;define&nbsp;...&gt;</code> tag appears at the top of a document, at the block level; it is not closed. Each tag defines a single constant which can be used later on in literal blocks document.

The defined attributes are:

<list>
<li><code>name</code>: the name of the constant.
<li><code>value</code>: the value to be given to the constant.
<li><code>length</code>: the length of the constant's field, in characters.
<li><code>align</code>: the alignment of the constant's contents in the field.
</list>

The <code>length</code> and <code>align</code> attributes are optional, and will be ignored if they do not make sense in the context of a specific output format.
</definition>

Constants can be defined entirely within the file, or they can be defined on the command line when a script is called. To give an example, a manual could start with the lines

<codeblock>
&lt;document title=&quot;Example&quot;&gt;
&lt;define name=&quot;foo&quot; value=&quot;bar&quot;&gt;
</codeblock>

to set the constant <code>foo</code> to the value &quot;bar&quot;. Within a literal block this constant can then be referenced by enclosing the constant name within double string symbols: <code>$$foo$$</code>. In the example above, <code>This is a $$foo$$ code</code> would result in the text <code>This is a bar code</code> being output.

Alternatively, the variable could have been defined as a command-line parameter to the script:

<command>textman -Iinfile -Ooutfile -Dfoo=bar</command>

When parameters are passed in this way, they override any <code>&lt;define&nbsp;...&gt;</code> tags found in the script file.

The <code>length</code> and <code>align</code> attributes can be used to apply fixed-space formatting where this makes sense in the context of the output format (such as plain text). The <code>length</code> gives a field width: when specified, the constant's value will be truncated to fit (if necessary) or padded out with spaces.  The text can be aligned to the left or right of the field, as shown here:

<codeblock>
&lt;document title=&quot;Example&quot;&gt;
&lt;define name=&quot;left&quot; value=&quot;Fred&quot; length=10 align=&quot;left&quot;&gt;
&lt;define name=&quot;right&quot; value=&quot;Jim&quot; length=10 align=&quot;right&quot;&gt;

&lt;literal mode=&quot;text&quot;&gt;
This text is $$left$$ aligned.
This text is $$right$$ aligned.
&lt;/literal&gt;
</codeblock>

would result in the output

<codeblock>
This text is Fred      aligned.
This text is       Jim aligned.
</codeblock>

being generated by the text script (which only works when viewed in a fixed-width font).


<subhead title="Chapters and literal blocks">

Following on from the document and constant definitions are a series of blocks of content which form the help text. There are two types of content: literal blocks are passed straight to the output for their specific format (and ignored for all other formats); chapters go into all outputs, but are formatted according to the requirements of the specific output before they go.

<definition target="&lt;literal&nbsp;...&gt; ... &lt;/literal&gt;">
The <code>&lt;literal&nbsp;...&gt; ... &lt;/literal&gt;</code> tag pair enclose a block of text that will be written to a specific type of output file.  The block is written with no translation apart from the insertion of constants as described above. No tags or entities are searched for or processed within a literal block.

The defined attributes are:

<list>
<li><code>mode</code>: the output mode that will output the text.
<li><code>file</code>: the file name if multiple output files are produced.
</list>
</definition>

The following output modes are currently defined, and are case-insensitive:

<list>
<li><code>Text</code> -- textman
<li><code>Strong</code> -- strongman
<li><code>HTML</code> -- htmlman
<li><code>DDF</code> -- ddfman
</list>

If the <code>mode</code> attribute given for a literal matches that of the script being run, then the literal is written to the output; otherwise it is skipped. If the script generates multiple files, then the <code>file</file> attribute will be used for the name of the file.

Chapters, on the other hand, are written to all outputs and can contain markup in the form of tags and entities. The contents is processed in a way that is appropriate to the capabilities of the current output format.

<definition target="&lt;chapter&nbsp;...&gt; ... &lt;/chapter&gt;">
The <code>&lt;chapter&nbsp;...&gt; ... &lt;/chapter&gt;</code> tag pair enclose a block of text that forms a chapter in a document.  Depending upon the type of manual being produced, this will either form a section of text with a main heading above it, or it will be a separate page.

The defined attributes are:

<list>
<li><code>title</code>: the title of the chapter as used in the document.
<li><code>file</code>: the file name or link attribute.  This is used to reference the chapter in the <code>&lt;link&nbsp;...&gt;</code> tag and will be used as a filename if multiple output files are produced.
</list>
</definition>

Unlike a literal block, a chapter has a <code>title</code> attribute to set the title for the block of text: this is written out in advance with suitable formatting.

As with literal blocks, chapters also have a <code>file</code> attribute to specify a filename for multi-file output formats. However, the value here is also used as a bookmark for the <code>&lt;link&nbsp;...&gt; ... &lt;/link&gt; tag: allowing hyperlinks to be created in a manual when the format (such as StrongHelp or HTML) allows it.

</chapter>




<chapter title="Block Level Tags" file="Blocks">

The tags that can appear within a <code>&lt;chapter&nbsp;...&gt; ... &lt;/chapter&gt;</code> block fall into two groups: block-level and in-line tags. Block-level tags appear on a line of their own, and should be separated by newlines from other tags or content.

The purpose of block-level tags is to apply structure to the chapter contents, and allow the individual scripts to mark it up in a suitable way.  Some tags are 'open' and come without a closing tag: they apply to a single point in the text.  Other tags are 'closed', and affect one or more paragraphs that are enclosed between them.


<subhead title="Subheadings">

The <code>&lt;subhead&nbsp;...&gt;</code> tag places a subheading in the text.

<definition target="&lt;subhead&nbsp;...&gt;">
The <code>&lt;subhead&nbsp;...&gt;</code> tag appears in a chapter and inserts a sub heading at that point.  It is not closed.

The defined attributes are:

<list>
<li><code>title</code>: the title of the subsection.
</list>
</definition>


<subhead title="Lists">

Lists can be inserted into the text using the <code>&lt;list&nbsp;...&gt; ... &lt;/list&gt;</code> tag. Lists are effectively a set of specially-formatted paragraphs: indented appropriately, and marked by a bullet or number when they start with an <code>&lt;li&gt;</code> tag.

Lists can be bulleted, or identified by numeric or alphabetic indexes.  They can be nested.

<definition target="&lt;list&nbsp;...&gt; ... &lt;/list&gt;">
The <code>&lt;list&nbsp;...&gt; ... &lt;/list&gt;</code> tag pair enclose a bullet-point list.  The paragraphs between the tags are indented as a list and those with <code>&lt;li&gt;</code> at the start are given a bullet point.

The defined attributes are:

<list>
<li><code>type</code>: the type of list.  This can be <code>bullet</code>, <code>num</code>, <code>upper</code> or <code>lower</code>.  The default is bullet.

<li><code>spacing</code>: the line spacing.  This is either <code>0</code> or <code>1</code> and sets the number of lines between list paragraphs; the default is 0.
</list>
</definition>


<subhead title="Definitions">

The <code>&lt;definition&nbsp;...&gt; ... &lt;/definition&gt;</code> tag allows a definition to be given for a piece of text.  The target for the definition is given by the <code>target</code> attribute, and the definition itself is given by the paragraphs which fall within the tag.

<definition target="&lt;definition&nbsp;...&gt; ... &lt;/definition&gt;">
The <code>&lt;definition&nbsp;...&gt; ... &lt;/definition&gt;</code> tag pair enclose a definition of a piece of text (the target).  This is equivalent to the <code>&lt;dl&gt;&lt;dt&gt;&lt;dd&gt;</code> structure in HTML.

The defined attributes are:

<list>
<li><code>target</code>: the text being defined by the content of the definition block.
</list>
</definition>


<subhead title="Block formatting">

Blocks of text, comprising one or more paragraphs, can have specific formats applied. The <code>&lt;codeblock&nbsp;...&gt; ... &lt;/codeblock&gt;</code> can be used to enclose preformatted text: while intended for quoting blocks of code or text file, it can be used for other similar purposes.

<definition target="&lt;codeblock&gt; ... &lt;/codeblock&gt;">
The <code>&lt;codeblock&gt; ... &lt;/codeblock&gt;</code> tag pair enclose a section of code or literal text.  All lines (including blank ones) are output to the file.  A monospace font and indentation are used if applicable.

The are no defined attributes.
</definition>

The <code>&lt;box&gt; ... &lt;/box&gt;</code> tag can be used to highlight a block of text from the surrounding paragraphs.

<definition target="&lt;box&gt; ... &lt;/box&gt;">
The <code>&lt;box&gt; ... &lt;/box&gt;</code> tag pair enclose a section of text that is to be highlighted or stand out from the remaining copy (such as a 'box' in a magazine).

The defined attributes are:

<list>
<li><code>type</code>: the type of box to apply: either <code>info</code> or <code>warning</code>. If either are used, then a <code>sprites</code> parameter must be defined which gives the name of a spritefile in the manual containing suitable "info" and "warning" sprites of 32 pixels width.
</list>
</definition>

</chapter>




<chapter title="In-line tags" file="Inline">

Unlike block-level tags, in-line tags appear within a line of text.  They apply formatting to individual words or characters, as opposed to entire paragraphs.


<subhead title="References and hyperlinks">

The <code>&lt;link&nbsp;...&gt; ... &lt;/link&gt;</code> tag can be used to insert hyperlinks in formats that support them. The links can either be to other sections of the manual, or to external URLs.

<definition target="&lt;link ...&gt; ... &lt;/link&gt;">
The <code>&lt;link ...&gt; ... &lt;/link&gt;</code> tag pair enclose a hyperlink, that will be used in output formats that support these.

The defined attributes are:

<list>
<li><code>ref</code>: the <code>file</code> attribute from a <code>&lt;chapter ...&gt;</code> tag pair elsewhere in the document, defining the location to jump to. Alternatively, the reference can start with a <cite>StrongHelp</cite>-style <code>#url </code> (with a trailing space) to indicate that what follows is a URI.
</list>
</definition>

If an output format does not support hyperlinks, then the link tags are just removed during the processing.


<subhead title="Semantic tags">

There are several semantic tags that can be used to apply meaning to pieces of text. Which &ndash; or even if any &ndash; formats are applied will depend on the capabilities of the output format.

The defined semantics are:

<list>
<li><code>&lt;cite&gt; ... &lt;/cite&gt;</code>: indicates a citation.

<li><code>&lt;code&gt; ... &lt;/code&gt;</code>: identifies an inline block of code.

<li><code>&lt;command&gt; ... &lt;/command&gt;</code>: marks a command-line command.

<li><code>&lt;em&gt; ... &lt;/em&gt;</code>: emphasises the text.

<li><code>&lt;entry&gt; ... &lt;/entry&gt;</code>: identifies user-typed text.

<li><code>&lt;file&gt; ... &lt;/file&gt;</code>: shows a file name or path.

<li><code>&lt;icon&gt; ... &lt;/icon&gt;</code>: indicates an icon (button) label.

<li><code>&lt;key&gt; ... &lt;/key&gt;</code>: indicates a key name.

<li><code>&lt;menu&gt; ... &lt;/menu&gt;</code>: marks a menu entry.

<li><code>&lt;mouse&gt; ... &lt;/mouse&gt;</code>: indicates a mouse button.

<li><code>&lt;param&gt; ... &lt;/param&gt;</code>: marks a command-line parameter.

<li><code>&lt;strong&gt; ... &lt;/strong&gt;</code>: strongly emphasises the text.

<li><code>&lt;window&gt; ... &lt;/window&gt;</code>: marks a window title.
</list>

</chapter>













<literal mode="Text">


Updates and Contacting Me
-------------------------

  If you have any comments about ManTools, or would like to report any bugs
  that you find, you can email me at the address below.

  Updates to ManTools and more programs for RISC OS computers can be found
  on my website at http://www.stevefryatt.org.uk/software/

  Stephen Fryatt
  email: steve@stevefryatt.org.uk
</literal>

