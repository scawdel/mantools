#!/usr/bin/perl -w
#
# Copyright 2002-2012, Stephen Fryatt
#
# This file is part of ManTools:
#
#   http://www.stevefryatt.org.uk/software/
#
# Licensed under the EUPL, Version 1.1 only (the "Licence");
# You may not use this work except in compliance with the
# Licence.
#
# You may obtain a copy of the Licence at:
#
#   http://joinup.ec.europa.eu/software/page/eupl
#
# Unless required by applicable law or agreed to in
# writing, software distributed under the Licence is
# distributed on an "AS IS" basis, WITHOUT WARRANTIES
# OR CONDITIONS OF ANY KIND, either express or implied.
#
# See the Licence for the specific language governing
# permissions and limitations under the Licence.

# TextMan -- Convert help-markup into plain text files.
#
# Usage: TextMan -I<infile> -O<outfile> [-D<var>=<val> ...]


# The output type for literals in the file.

$mode="Text";

# Formatting variables.

set_new_indent(2);
set_new_spacing(1);
set_new_wrapping(1);
set_new_list_value(0, 0);
$all_lines = 0;
$box = 0;

%defs = ("title", "");

# Set the entities that we recognise.  NB: this list must contain them in a plain text form.

%entities = (
	"lt",	"<",
	"gt",	">",
	"quot",	"\"",
	"amp",	"\e"	# & goes to ESC, then is converted back to &
);

if (scalar(@ARGV) > 2) {
	# Too many arguments, so assume the new format.

	foreach $arg (@ARGV) {
		if ($arg =~ /^-I(.+)/) {
			$infile = $1;
		} elsif ($arg =~ /^-O(.+)/) {
			$outfile = $1;
		} elsif ($arg =~ /^-D([^=]+)=(.*)/) {
			$defs{$1} = $2;
		}
	}
} else {
	# Default to the parameters being <infile> <outfile> for backwards
	# compatibility.

	$infile = $ARGV[0];
	$outfile = $ARGV[1];
}

# Open the input and output files -- there is only one output file used.

open(INPUT, $infile) || die "Can't open input file $infile: $!\n";
open(OUTPUT, ">".$outfile) || die "Can't open output file $outfile: $!\n";

# Read the lines in one at a time and process them.

while (defined($line = <INPUT>)) {
	chomp($line);

	if ($line =~ /^\s*<([^<>]*)>\s*$/) {
		%params = parse_tag($1);

		if ($params{'tag_name'} eq 'define') {
			# If it's already defined, then either we've defined it twice in the file,
			# or the file definition has been overridden by a command line definition.
			# In the latter case, we use the definition here to set field size and justification.

			if (defined($defs{$params{'name'}})) {
				$defn = $defs{$params{'name'}};
			} else {
				$defn = $params{'value'};
			}

			if (defined($params{'length'})) {
				if (uc($params{'align'}) eq "LEFT") {
					$defn = sprintf "%-$params{'length'}s", $defn;
				} elsif (uc($params{'align'}) eq "RIGHT") {
					$defn = sprintf "%+$params{'length'}s", $defn;
				}
			}

			$defs{$params{'name'}} = $defn;
		} elsif ($params{'tag_name'} eq 'chapter') {
			print OUTPUT "\n\n".$params{'title'}."\n";
			print OUTPUT "-" x length($params{'title'}) . "\n\n";
		} elsif ($params{'tag_name'} eq 'literal') {
			while (defined($literal_line = <INPUT>) && $literal_line !~ /^<\/literal>$/) {
				if (uc($params{'mode'}) eq uc($mode)) {
					while ($literal_line =~ /\$\$([a-z]+?)\$\$/) {
						$literal_line = "$`$defs{$1}$'";
					}
					print OUTPUT $literal_line;
				}
			}
		} elsif ($params{'tag_name'} eq 'subhead') {
			print OUTPUT "\n  ".$params{'title'}."\n";
			print OUTPUT "  " . "-" x length ($params{'title'}) . "\n\n";
		} elsif ($params{'tag_name'} eq 'codeblock') {
			set_new_indent($indent + 2);
			set_new_spacing(0);
			set_new_wrapping(0);
			$all_lines = 1;
		} elsif ($params{'tag_name'} eq '/codeblock') {
			restore_indent();
			restore_spacing();
			restore_wrapping();
			print OUTPUT "\n";
			$all_lines = 0;
		} elsif ($params{'tag_name'} eq 'box') {
			set_new_indent($indent + 2);
			$box = 1;
		} elsif ($params{'tag_name'} eq '/box') {
			restore_indent();
			$box = 0;
		} elsif ($params{'tag_name'} eq 'list') {
			if (defined($params{'spacing'}) && $params{'spacing'} == 1) {
				set_new_spacing(1);
			} else {
				set_new_spacing(0);
			}

			if (defined ($params{'type'})) {
				if ($params{'type'} eq 'num') {
					set_new_list_value(1, 2);
					set_new_indent($indent + 4);
				} elsif ($params{'type'} eq 'upper') {
					set_new_list_value(1, 3);
					set_new_indent($indent + 4);
				} elsif ($params{'type'} eq 'lower') {
					set_new_list_value(1, 4);
					set_new_indent($indent + 4);
				} else {
					set_new_list_value(0, 1);
					set_new_indent($indent + 2);
				}
			} else {
				set_new_list_value(0, 1);
				set_new_indent($indent + 2);
			}
		} elsif ($params{'tag_name'} eq '/list') {
			if ($spacing == 0) {
				print OUTPUT "\n";
			}

			restore_spacing();
			restore_indent();
			restore_list_value();
		} elsif ($params{'tag_name'} eq 'definition') {
			output_line(OUTPUT, $params{'target'}, $indent, $spacing);
			set_new_indent($indent + 2);
		} elsif ($params{'tag_name'} eq '/definition') {
			restore_indent();
		} elsif ($params{'tag_name'} eq 'comdef') {
			output_line(OUTPUT, $params{'target'}." ".$params{'params'}, $indent, $spacing);
			set_new_indent($indent + 2);
		} elsif ($params{'tag_name'} eq '/comdef') {
			restore_indent();
		}
	} elsif ($line !~ /^\s*$/  || $all_lines) {
		output_line(OUTPUT, $line, $indent, $spacing);
	}
}


# -------------------------------------------------------------------------------------------------
# Process a line of text from the file, parsing any in-line commands and formatting it for the
# current file type, before writing it to the output.
#
# Param: $output		The file handle of the output file.
# Param: $line			The line of text to be written.
# Param: $indent		The current indent value.
# Param: $spacing		The current line spacing value.

sub output_line
{
	my ($output, $line, $indent, $spacing) = @_;

	$line =~ s/<cite>(.*?)<\/cite>/$1/g;		# Citation - no effect
	$line =~ s/<code>(.*?)<\/code>/"$1"/g;		# Inline code - enclose in ""
	$line =~ s/<command>(.*?)<\/command>/"$1"/g;	# Command line - no effect
	$line =~ s/<em>(.*?)<\/em>/uc $1/eg;		# Emphasis - To Upper
	$line =~ s/<entry>(.*?)<\/entry>/"$1"/g;	# User entry - enclose in ""
	$line =~ s/<file>(.*?)<\/file>/$1/g;		# Filename - no effect
	$line =~ s/<icon>(.*?)<\/icon>/'$1'/g;		# Icon labels - enclose in ''
	$line =~ s/<key>(.*?)<\/key>/ucfirst $1/eg;	# Key names - initial capital
	$line =~ s/<menu>(.*?)<\/menu>/'$1'/g;		# Menu entries - enclose in ''
	$line =~ s/<mouse>(.*?)<\/mouse>/ucfirst $1/eg;	# Mouse buttons - initial capital
	$line =~ s/<param>(.*?)<\/param>/$1/g;		# Command parameter - no effect
	$line =~ s/<strong>(.*?)<\/strong>/uc $1/eg;	# Strong Emphasis - To Upper
	$line =~ s/<window>(.*?)<\/window>/$1/g;	# Window names - no effect

	# Hyperlinks are unsupported, so just remove them.

	$line =~ s/<link.*?>(.*?)<\/link>/$1/g;

	# Finally, expand all the entities out.

	while ($line =~ /&(.*?);/) {
		$line = "$`$entities{$1}$'";
	}

	$line =~ s/\e/&/g; # Restore the &s after the entities have gone.

	# Indent the first line, using a bullet or number if necessary.

	$first = 0;

	if ($line =~ /^<li>/) {
		if ($list_type != 0) {
			if ($list_type == 1) {
				$current_line = " " x ($indent-2)."* ";
			} elsif ($list_type == 2) {
				$current_line = " " x ($indent-4).sprintf ("%2d. ", $list_value++);
				$first = 1; # Don't double-space the trailing dot...
			} elsif ($list_type == 3) {
				$current_line = " " x ($indent-4).sprintf ("%2c) ", 64+$list_value++);
			} elsif ($list_type == 4) {
				$current_line = " " x ($indent-4).sprintf ("%2c) ", 96+$list_value++);
			}
		} else {
			$current_line = " " x ($indent);
		}

		$line =~ s/^<li>\s*//;
	} else {
		$current_line = " " x $indent;
	}

	# Perform the linewrap on the string, indenting as required.

	$line .= " ";
	$new_line = "";
	$next_space = " ";
	chop($current_line); # Assumes that the last character of indent is space, replaced by one below.

	while ($line ne "") {
		$line =~ /( +)/;
		$word = $`;

		if ($wrapping != 0) {
			$space = ' ';
		} else {
			$space = $next_space;
			$next_space = $1;
		}

		$line = $';

		if ($wrapping != 0 && $space eq ' ' && $current_line =~ /\.$/ && $word =~ /^[A-Z]/ && !$first) {
			$space = '  '; # Double-space after '.' if the next letter is upper-case.
		}

		if (length ($current_line.$space.$word) <= 77) {
			$current_line .= $space.$word;
		} else {
			$new_line .= $current_line."\n";
			$current_line = (' ' x $indent).$word;
		}

		$first = 0;
	}

	$line = $new_line.$current_line;

	# Remove any trailing whitespace from the line and then add in newlines
	# for the required linespacing.

	$line =~ s/\s*$//;
	$line .= "\n"x$spacing;

	print $output "$line\n";
}


# -------------------------------------------------------------------------------------------------
# Set new list details, pushing the old ones onto the stack so that they can be retrieved later.
#
# List Types are:	1 = Bullet.
#			2 = Decimal numbers.
#			3 = Upper Case letters.
#			4 = Lower Case letters.
#
# Param: $value			The new list item number.
# Param: $type			The new list type.

sub set_new_list_value
{
	my ($value, $type) = @_;

	push(@list_vals, $list_value);
	$list_value = $value;
	push(@list_types, $list_type);
	$list_type = $type;
}


# -------------------------------------------------------------------------------------------------
# Restore the previous list type from the stack.

sub restore_list_value
{
	$list_value = pop(@list_vals);
	$list_type = pop(@list_types);
}


# -------------------------------------------------------------------------------------------------
# Set a new line indent, pushing the old value onto the stack so that it can be retrieved later.
#
# Param: $new			The required new line indent.

sub set_new_indent
{
	my ($new) = @_;

	push(@indents, $indent);
	$indent = $new;
}


# -------------------------------------------------------------------------------------------------
# Restore the previous line indent from the stack.

sub restore_indent
{
	$indent = pop(@indents);
}


# -------------------------------------------------------------------------------------------------
# Set a new line spacing, pushing the old value onto the stack so that it can be retrieved later.
#
# Param: $new			The required new line spacing.

sub set_new_spacing
{
	my ($new) = @_;

	push(@spacings, $spacing);
	$spacing = $new;
}


# -------------------------------------------------------------------------------------------------
# Restore the previous line spacing from the stack.

sub restore_spacing
{
	$spacing = pop(@spacings);
}


# -------------------------------------------------------------------------------------------------
# Set a new wrap status, pushing the old value onto the stack so that it can be retrieved later.
#
# Param: $new			The required wrap status (1 = Wrap; 0 = No Wrap).

sub set_new_wrapping
{
	my ($new) = @_;

	push(@wrappings, $wrapping);
	$wrapping = $new;
}


# -------------------------------------------------------------------------------------------------
# Restore the previous line wrapping from the stack.

sub restore_wrapping
{
	$wrapping = pop(@wrappings);
}


# -------------------------------------------------------------------------------------------------
# Parse a teg, returning a hash containing a set of attribute/value pairs.
# The tag is given an attribute name "tag_name".
#
# Param: $tag			The tag to be parsed (eg. "p name="value"").
# Return:			A hash of tag name and attribute values.

sub parse_tag
{
	my ($tag) = @_;
	my (%attributes, @items, $item, $name, $value);

	# Convert the spaces outside of quotes into \n and split on these.

	$tag =~ s/\s+([^="]*?=)/\n$1/g;
	@items = split(/\n/, $tag);

	foreach $item (@items) {
		($name, $value) = split(/=/, $item);

		if (defined($value) && $value ne "") {
			$value =~ s/^\s*"(.*)"\s*$/$1/; # Strip quotes and external whitespace.
			$attributes{$name} = $value;
		} else {
			$attributes{'tag_name'} = $name;
		}
	}

	return %attributes;
}

