#!/usr/bin/perl -w
#
# Copyright 2002-2013, Stephen Fryatt (info@stevefryatt.org.uk)
#
# This file is part of ManTools:
#
#   http://www.stevefryatt.org.uk/software/
#
# Licensed under the EUPL, Version 1.1 only (the "Licence");
# You may not use this work except in compliance with the
# Licence.
#
# You may obtain a copy of the Licence at:
#
#   http://joinup.ec.europa.eu/software/page/eupl
#
# Unless required by applicable law or agreed to in
# writing, software distributed under the Licence is
# distributed on an "AS IS" basis, WITHOUT WARRANTIES
# OR CONDITIONS OF ANY KIND, either express or implied.
#
# See the Licence for the specific language governing
# permissions and limitations under the Licence.

# ManTools -- Convert help-markup into readable files.
#
# Usage: ManTools -M<TEXT|HTML|STRONG|DDF> -I<infile> -O<outfile> [-D<var>=<val> ...]

use Tree::Simple;

use strict;

use constant TRUE		=> 1;
use constant FALSE		=> 0;

use constant LIST_NONE		=> 0;
use constant LIST_BULLET	=> 1;
use constant LIST_NUMERIC	=> 2;
use constant LIST_UPPER		=> 3;
use constant LIST_LOWER		=> 4;

use constant MODE_TEXT		=> 'TEXT';
use constant MODE_STRONG	=> 'STRONG';
use constant MODE_HTML		=> 'HTML';
use constant MODE_DDF		=> 'DDF';

# Entity conversions used by the various modes.

my %text_entities = (
	"lt",		"<",
	"gt",		">",
	"quot",		'"',
	"ldquo",	'"',
	"rdquo",	'"',
	"lsquo",	"'",
	"rsquo",	"'",
	"ndash",	"--",
	"nbsp",		"\xa0",
	"msep",		"--",
	"minus",	"-",
	"times",	"x",
	"amp",		"&"
);

my %strong_entities = (
	"lt",		'\<',
	"gt",		'\>',
	"quot",		'"',
	"ldquo",	"\x94",
	"rdquo",	"\x95",
	"lsquo",	"\x90",
	"rsquo",	"\x91",
	"ndash",	"\x97",
	"nbsp",		"\xa0",
	"msep",		"{f31:\xd5}",
	"minus",	"\x99",
	"times",	"\xd7",
	"amp",		"&"
);

my %html_entities = (
	"msep",		"&rarr;"
);

my $html_core_image_base = "";

# Formatting variables.

my $output_preformatted = FALSE;

my %defs = ("title", "");

# Process the command line arguments.

my $infile = undef;
my $outfile = undef;
my $mode = undef;

foreach my $arg (@ARGV) {
	if ($arg =~ /^-I(.+)/) {
		$infile = $1;
	} elsif ($arg =~ /^-O(.+)/) {
		$outfile = $1;
	} elsif ($arg =~ /^-M(.+)/) {
		$mode = uc($1);
	} elsif ($arg =~ /^-C(.+)/) {
		$html_core_image_base = $1;
	} elsif ($arg =~ /^-D([^=]+)=(.*)/) {
		$defs{$1} = $2;
	}
}

if (!defined($mode) || !defined($infile) || !defined($outfile)) {
	die "Missing mode, input or output filename parameters.\n";
}

# Validate the specified output mode.

my $found = FALSE;

foreach my $item ((MODE_TEXT, MODE_STRONG, MODE_HTML)) {
	if ($item eq $mode) {
		$found = TRUE;
	}
}

if (!$found) {
	die "Invalid Mode.\n";
}

# Open the input and output files -- there is only one output file used.

my $parse_tree = Tree::Simple->new({object => 'Root', indent => 0}, Tree::Simple->ROOT);
my $current_node = $parse_tree;

open(INPUT, $infile) || die "Can't open input file $infile: $!\n";

if ($mode eq MODE_STRONG) {
	unless ($outfile =~ /\/$/) {
		$outfile .= '/';
	}

	if (!(-d $outfile)) {
		mkdir $outfile, 0755;
	}
} else {
	open(OUTPUT, ">".$outfile) || die "Can't open output file $outfile: $!\n";
}

# Read the lines in one at a time and process them.

my $current_chapter = 1;

while (defined(my $line = <INPUT>)) {
	chomp($line);

	if ($line =~ /^\s*<([^<>]*)>\s*$/) {
		my %params = parse_tag($1);

		if ($params{'tag_name'} eq 'define') {
			my $defn = "";

			# If the constant is already defined, then either it has been defined
			# twice in the file or the file definition has been overridden by
			# a command-line parameter. Either way, we take the existing definition
			# if there is one.

			if (defined($defs{$params{'name'}})) {
				$defn = $defs{$params{'name'}};
			} else {
				$defn = $params{'value'};
			}

			# If the mode is text, we need to align the parameter within its
			# field width.

			if ($mode eq MODE_TEXT && defined($params{'length'})) {
				if (uc($params{'align'}) eq "LEFT") {
					$defn = sprintf "%-$params{'length'}s", $defn;
				} elsif (uc($params{'align'}) eq "RIGHT") {
					$defn = sprintf "%+$params{'length'}s", $defn;
				}
			}

			$defs{$params{'name'}} = $defn;
		} elsif ($params{'tag_name'} eq 'document') {
			$defs{'title'} = $params{'title'};
		} elsif ($params{'tag_name'} eq 'chapter') {
			if (!defined($params{'title'})) {
				$params{'title'} = "Chapter";
			}
			if (!defined($params{'file'})) {
				$params{'file'} = "Chapter".$current_chapter;
			}
			$current_node = Tree::Simple->new({object => 'Chapter', %params}, $current_node);
			$current_chapter += 1;
		} elsif ($params{'tag_name'} eq '/chapter') {
			$current_node = $current_node->getParent;
		} elsif ($params{'tag_name'} eq 'literal') {
			my $literal = "";
			my $literal_line = "";

			if (!defined($params{'mode'})) {
				$params{'mode'} = "";
			}

			while (defined ($literal_line = <INPUT>) && $literal_line !~ /^<\/literal>$/) {
				if (uc($params{'mode'}) eq uc($mode)) {
					while ($literal_line =~ /\$\$([a-z]+?)\$\$/) {
						$literal_line = "$`$defs{$1}$'";
					}

					$literal .= $literal_line;
				}
			}

			if ($literal ne "") {
				Tree::Simple->new({object => 'Literal', content => $literal, %params}, $current_node);
			}
		} elsif ($params{'tag_name'} eq 'subhead') {
			if (!defined($params{'title'})) {
				$params{'title'} = "Subheading";
			}
			Tree::Simple->new({object => 'Subhead', %params}, $current_node);
		} elsif ($params{'tag_name'} eq 'codeblock') {
			$current_node = Tree::Simple->new({object => 'CodeBlock'}, $current_node);
			$output_preformatted = TRUE;
		} elsif ($params{'tag_name'} eq '/codeblock'){
			$current_node = $current_node->getParent;
			$output_preformatted = FALSE;
		} elsif ($params{'tag_name'} eq 'box') {
			$current_node = Tree::Simple->new({object => 'Box', %params}, $current_node);
		} elsif ($params{'tag_name'} eq '/box') {
			$current_node = $current_node->getParent;
		} elsif ($params{'tag_name'} eq 'list') {
			if (node_is($current_node, 'ListItem')) {
				# If this is a nested list, close the parent list item before nesting.
				$current_node = $current_node->getParent;
			}
			if (!defined($params{'type'})) {
				$params{'type'} = "";
			}
			$params{'type'} = lc($params{'type'});
			if ($params{'type'} eq 'num') {
				$params{'type'} = LIST_NUMERIC;
			} elsif ($params{'type'} eq 'upper') {
				$params{'type'} = LIST_UPPER;
			} elsif ($params{'type'} eq 'lower') {
				$params{'type'} = LIST_LOWER;
			} else {
				$params{'type'} = LIST_BULLET;
			}

			$current_node = Tree::Simple->new({object => 'List', %params}, $current_node);
		} elsif ($params{'tag_name'} eq '/list') {
			if (node_is($current_node, 'ListItem')) {
				# If we're in a list item, end it first.
				$current_node = $current_node->getParent;
			}
			$current_node = $current_node->getParent;
		} elsif ($params{'tag_name'} eq 'definition') {
			if (!defined($params{'target'})) {
				$params{'target'} = "Definition";
			}
			$current_node = Tree::Simple->new({object => 'Definition', %params}, $current_node);
		} elsif ($params{'tag_name'} eq '/definition') {
			$current_node = $current_node->getParent;
		} elsif ($params{'tag_name'} eq 'comdef') {
			my $command = "";
			if (defined($params{'target'})) {
				$command = "\n<dl><dt><b>".$params{'target'}."</b>";
			} else {
				$command = "\n<dl><dt><b>Command</b>";
			}
			if (defined($params{'params'})) {
				$command .= " <i>".$params{'params'}."</i>";
			}
			$command .= "</dt>\n<dd>\n";
			$current_node = Tree::Simple->new({object => 'ComDef', %params}, $current_node);
		} elsif ($params{'tag_name'} eq '/comdef') {
			$current_node = $current_node->getParent;
		}
	} elsif ($line !~ /^\s*$/  || $output_preformatted) {
		if ($line =~ /^<li>/) {
			if (node_is($current_node, 'ListItem')) {
				# If we're already in a list item, end it before starting a new one.
				$current_node = $current_node->getParent;
			}
			$current_node = Tree::Simple->new({object => 'ListItem'}, $current_node);

			$line =~ s/^<li>//;
		}
		Tree::Simple->new({object => 'Paragraph', content => $line}, $current_node);
	}
}

# Turn the tree into the requested output.

if ($mode eq MODE_TEXT) {
	$parse_tree->traverse(\&text_open, \&text_close);
} elsif ($mode eq MODE_STRONG) {
	$parse_tree->traverse(\&strong_open, \&strong_close);
} elsif ($mode eq MODE_HTML) {
	$parse_tree->traverse(\&html_open, \&html_close);
}



# -------------------------------------------------------------------------------------------------
# Process a node for Text output.
#
# Param: $node			The node to process.

sub text_open
{
	my ($node) = @_;
	my $parent = $node->getParent;
	my $object = $node->getNodeValue()->{'object'};

	if ($object eq 'Literal') {
		print OUTPUT get_value($node, 'content');
	} elsif ($object eq 'Chapter') {
		print OUTPUT text_linefeed($node);
		print OUTPUT text_indent($node).get_value($node, 'title')."\n";
		print OUTPUT text_indent($node)."-" x length(get_value($node, 'title'))."\n";
		print OUTPUT text_linefeed($node, TRUE);
		set_value($node, 'indent', 2);
	} elsif ($object eq 'Subhead') {
		print OUTPUT text_linefeed($node);
		print OUTPUT text_indent($node).get_value($node, 'title')."\n";
		print OUTPUT text_indent($node)."-" x length(get_value($node, 'title'))."\n";
		print OUTPUT text_linefeed($node, TRUE);
	} elsif ($object eq 'List') {
		if (get_value($node, 'type') == LIST_BULLET) {
			set_value($node, 'indent', 2);
		} else {
			set_value($node, 'indent', 4);
		}
	} elsif ($object eq 'ListItem') {
		if (get_value($parent, 'type') == LIST_NUMERIC) {
			set_value($node, 'firstline', sprintf("%2d.", $node->getIndex + 1));
		} elsif (get_value($parent, 'type') == LIST_UPPER) {
			set_value($node, 'firstline', sprintf("%2c) ", $node->getIndex + 65));
		} elsif (get_value($parent, 'type') == LIST_LOWER) {
			set_value($node, 'firstline', sprintf("%2c) ", $node->getIndex + 96));
		} else {
			set_value($node, 'firstline', "*");
		}
	} elsif ($object eq 'CodeBlock') {
		set_value($node, 'indent', 2);
	} elsif ($object eq 'Box') {
		if (lc(get_value($node, 'type')) eq 'info') {
			set_value($node, 'firstline', "(i)");
			set_value($node, 'indent', 6);
		} elsif (lc(get_value($node, 'type')) eq 'warning') {
			set_value($node, 'firstline', "(!)");
			set_value($node, 'indent', 6);
		} else {
			set_value($node, 'indent', 2);
		}
	} elsif ($object eq 'Definition') {
		print OUTPUT text_indent($node).substitute_entities(get_value($node, 'target'), %text_entities)."\n";
		print OUTPUT text_linefeed($node);
		set_value($node, 'indent', 2);
	} elsif ($object eq 'ComDef') {
		my $command = "";
		if (defined(get_value($node, 'target'))) {
			$command .= get_value($node, 'target');
		} else {
			$command .= "Command";
		}
		if (defined(get_value($node, 'params'))) {
			$command .= " ".get_value($node, 'params');
		}
		print OUTPUT text_indent($node).substitute_entities($command, %text_entities)."\n";
		print OUTPUT text_linefeed($node);
		set_value($node, 'indent', 2);
	} elsif ($object eq 'Paragraph') {
		print OUTPUT text_format_line($node);
		if (text_linespace($node)) {
			print OUTPUT text_linefeed($node, TRUE);
		}
	} else {
		print "Node Type '".$object."'\n";
	}
}


# -------------------------------------------------------------------------------------------------
# Reprocess a node for Text output once its children have been processed.
#
# Param: $node			The node to process.

sub text_close
{
	my ($node) = @_;

	my $value = $node->getNodeValue();
	my $object = $value->{'object'};

	if ($object eq 'Chapter') {
		print OUTPUT text_linefeed($node);
	} elsif ($object eq 'List') {
		if ((!defined(get_value($node, 'spacing')) || get_value($node, 'spacing') == 0) &&
				text_linespace($node->getParent)) {
			print OUTPUT text_linefeed($node, TRUE);
		}
	} elsif ($object eq 'ListItem') {
#		print OUTPUT "</li>".html_closing_nl($node);
	} elsif ($object eq 'CodeBlock') {
		if (text_linespace($node->getParent)) {
			print OUTPUT text_linefeed($node, TRUE);
		}
	} elsif ($object eq 'Box') {
#		print OUTPUT "</div>".html_closing_nl($node);
	} elsif ($object eq 'Definition' || $object eq 'ComDef') {
#		print OUTPUT "</dd></dl>".html_closing_nl($node);
	}
}


# -------------------------------------------------------------------------------------------------
# Process a line of text from the file, parsing any in-line commands and formatting it for
# text format output.
#
# Param: $node			The node whose contents is to be processed.
# Return: 			The formatted line.

sub text_format_line
{
	my ($node) = @_;

	my $parent = $node->getParent;
	my $line = get_value($node, 'content');
	my $first = FALSE;

	$line =~ s/<cite>(.*?)<\/cite>/$1/g;		# Citation - no effect
	$line =~ s/<code>(.*?)<\/code>/"$1"/g;		# Inline code - enclose in ""
	$line =~ s/<command>(.*?)<\/command>/"$1"/g;	# Command line - no effect
	$line =~ s/<em>(.*?)<\/em>/uc $1/eg;		# Emphasis - To Upper
	$line =~ s/<entry>(.*?)<\/entry>/"$1"/g;	# User entry - enclose in ""
	$line =~ s/<file>(.*?)<\/file>/$1/g;		# Filename - no effect
	$line =~ s/<icon>(.*?)<\/icon>/'$1'/g;		# Icon labels - enclose in ''
	$line =~ s/<key>(.*?)<\/key>/ucfirst $1/eg;	# Key names - initial capital
	$line =~ s/<menu>(.*?)<\/menu>/'$1'/g;		# Menu entries - enclose in ''
	$line =~ s/<mouse>(.*?)<\/mouse>/ucfirst $1/eg;	# Mouse buttons - initial capital
	$line =~ s/<param>(.*?)<\/param>/$1/g;		# Command parameter - no effect
	$line =~ s/<strong>(.*?)<\/strong>/uc $1/eg;	# Strong Emphasis - To Upper
	$line =~ s/<window>(.*?)<\/window>/$1/g;	# Window names - no effect

	# Hyperlinks are unsupported, so just remove them.

	$line =~ s/<link.*?>(.*?)<\/link>/$1/g;

	# Finally, expand all the entities out.

	$line = substitute_entities($line, %text_entities);

	# Indent the first line and identify the wrapping mode.

	my $current_line = text_indent($node);

	my $wrapping = text_wrapping($node);

	# Perform the linewrap on the string, indenting as required.

	$line .= " ";

	my $word = "";
	my $space = "";

	my $new_line = "";
	my $next_space = " ";
	chop($current_line); # Assumes that the last character of indent is space, replaced by one below.

	while ($line ne "") {
		$line =~ /( +)/;
		$word = $`;

		if ($wrapping == TRUE) {
			$space = ' ';
		} else {
			$space = $next_space;
			$next_space = $1;
		}

		$line = $';

		if ($wrapping == TRUE && $space eq ' ' && $current_line =~ /\.$/ && $word =~ /^[A-Z]/ && !$first) {
			$space = '  '; # Double-space after '.' if the next letter is upper-case.
		}

		if (length ($current_line.$space.$word) <= 77) {
			$current_line .= $space.$word;
		} else {
			$new_line .= $current_line."\n";
			$current_line = text_indent($node).$word;
		}

		$first = FALSE;
	}

	$line = $new_line.$current_line;

	$line =~ s/\xa0/ /g; # Replace hard spaces with spaces once linewrap is done.

	# Remove any trailing whitespace from the line.

	$line =~ s/\s*$//;

	return $line."\n";
}


# -------------------------------------------------------------------------------------------------
# Return a linefeed string for the current node.
#
# Param: $node			The node to process.
# Param: $closing		Optional: TRUE if the closing linefeed of a block; defaults to
#				FALSE.
# Return:			The string to use for linefeed.


sub text_linefeed
{
	my ($node, $closing) = @_;

	if (!defined($closing)) {
		$closing = FALSE;
	}

	my $indent = text_indent($node, $closing);
	$indent =~ s/\s+$//;

	return $indent . "\n";
}


# -------------------------------------------------------------------------------------------------
# Scan back up the tree and calculate the required indent string for lines in the current node.
#
# Param: $node			The node to process.
# Param: $closing		Optional: TRUE if the closing indent of a block; defaults to
#				FALSE.
# Return:			The string to use for indent.

sub text_indent
{
	my ($node, $closing) = @_;

	if (!defined($closing)) {
		$closing = FALSE;
	}

	my $indent = "";
	my $indent_text = "";
	my $last_node = last_node($node);

	while ($node ne Tree::Simple->ROOT) {
		if (node_is($node, 'ListItem')) {
			$indent_text = get_value($node, 'firstline');
			if ($indent_text ne "") {
				set_value($node, 'firstline', "");
			}
		} elsif (node_is($node, 'List')) {
			$indent = $indent_text . " " x (get_value($node, 'indent') - length($indent_text)) . $indent;
			$indent_text = "";
		} elsif (node_is($node, 'Box') && (!$closing || !$last_node)) {
			$indent_text = "| ";
			if (defined(get_value($node, 'firstline')) && get_value($node, 'firstline') ne "") {
				$indent_text .= get_value($node, 'firstline');
				set_value($node, 'firstline', "");
			}

			$indent = $indent_text . " " x (get_value($node, 'indent') - length($indent_text)) . $indent;
		} elsif (defined(get_value($node, 'indent'))) {
			$indent = " " x get_value($node, 'indent') . $indent;
		}

		$node = $node->getParent;
	}

	return $indent;
}


# -------------------------------------------------------------------------------------------------
# Scan back up the tree and identify if the current node's content should be line-wrapped.
#
# Param: $node			The node to process.
# Return:			TRUE if the content should be wrapped; else FALSE.

sub text_wrapping
{
	my ($node) = @_;
	my $wrap = TRUE;

	while ($node ne Tree::Simple->ROOT) {
		if (node_is($node, 'CodeBlock')) {
			$wrap = FALSE;
		}
		$node = $node->getParent;
	}

	return $wrap;
}


# -------------------------------------------------------------------------------------------------
# Scan back up the tree and identify if the current node's content should be followed by a
# line space.
#
# Param: $node			The node to process.
# Return:			TRUE if the content should be spaced; else FALSE.

sub text_linespace
{
	my ($node) = @_;
	my $space = TRUE;
	my $first_list = TRUE;
	my $last_item = last_node($node);

	while ($node ne Tree::Simple->ROOT) {
		if (node_is($node, 'CodeBlock')) {
			$space = FALSE;
		} elsif (node_is($node, 'List') && $first_list) {
			$first_list = FALSE;
			if (!defined(get_value($node, 'spacing')) || get_value($node, 'spacing') == 0) {
				$space = FALSE;
			}
		}
		$node = $node->getParent;
	}

	return $space;
}


# -------------------------------------------------------------------------------------------------
# Process a node for Strong Help output.
#
# Param: $node			The node to process.

sub strong_open
{
	my ($node) = @_;
	my $parent = $node->getParent;
	my $object = get_value($node, 'object');

	if ($object eq 'Literal') {
		open(OUTPUT, ">".$outfile.get_value($node, 'file')) || die "Can't open output file: $!\n";
		print OUTPUT get_value($node, 'content');
		close(OUTPUT);
	} elsif ($object eq 'Chapter') {
		open(OUTPUT, ">".$outfile.get_value($node, 'file')) || die "Can't open output file: $!\n";

		# Output the start of the chapter and set the flags.

		print OUTPUT $defs{'title'}.": ".get_value($node, 'title')."\n";
		if (defined($defs{'sprites'})) {
			print OUTPUT "#SpriteFile ".$defs{'sprites'}."\n";
		}
		print OUTPUT "{fh1:".get_value($node, 'title')."}\n";
		print OUTPUT "#Line\n";

		set_value($node, 'indent', 2);
		print OUTPUT "#Indent ".strong_indent($node)."\n";
	} elsif ($object eq 'Subhead') {
		print OUTPUT "{fh2:".get_value($node, 'title')."}\n\n";
	} elsif ($object eq 'List') {
		set_value($node, 'indent', 1);
		print OUTPUT "#Indent ".strong_indent($node)."\n";
	} elsif ($object eq 'ListItem') {
		if (get_value($parent, 'type') == LIST_NUMERIC) {
			print OUTPUT ($node->getIndex + 1).".";
		} elsif (get_value($parent, 'type') == LIST_UPPER) {
			print OUTPUT sprintf ("%c)", 65 + $node->getIndex);
		} elsif (get_value($parent, 'type') == LIST_LOWER) {
			print OUTPUT sprintf ("%c)", 97 + $node->getIndex);
		} else {
			print OUTPUT "\x8f";
		}
	} elsif ($object eq 'CodeBlock') {
		set_value($node, 'indent', 2);
		print OUTPUT "\n";
		print OUTPUT "#Indent ".strong_indent($node)."\n";
		print OUTPUT "#FCode\n";
	} elsif ($object eq 'Box') {
		my $type = get_value($node, 'type');
		if (defined($type)) {
			$type = lc($type);
		} else {
			$type = "";
		}

		if ($type eq 'info' || $type eq 'warning') {
			set_value($node, 'indent', 5);
			print OUTPUT "#Indent ".strong_indent($node)."\n";
			print OUTPUT "#Sprite ".((strong_indent($parent)*16).",f ".get_value($node, 'type')."\n");
			print OUTPUT "#F/\n";
		} else {
			print OUTPUT "#Indent ".strong_indent($node)."\n";
			print OUTPUT "#F*\n";
		}
	} elsif ($object eq 'Definition') {
		set_value($node, 'indent', 2);
		print OUTPUT "{f*:".substitute_entities(get_value($node, 'target'), %strong_entities)."}\n";
		print OUTPUT "\n";
		print OUTPUT "#Indent ".strong_indent($node)."\n";
	} elsif ($object eq 'ComDef') {
		set_value($node, 'indent', 2);
		my $command = "";
		if (defined(get_value($node, 'target'))) {
			$command .= "{f*:".get_value($node, 'target')."}";
		} else {
			$command .= "{f*:Command}";
		}
		if (defined(get_value($node, 'params'))) {
			$command .= " {f*/:".get_value($node, 'params')."}";
		}
		print OUTPUT substitute_entities($command, %strong_entities)."\n";
		print OUTPUT "\n";
		print OUTPUT "#Indent ".strong_indent($node)."\n";
	} elsif ($object eq 'Paragraph') {
		my $line = strong_format_line($node);

		if (node_is($parent, 'ListItem')) {
			print OUTPUT "\t";
		}
		print OUTPUT $line;
		print OUTPUT strong_closing_nl($node);
	} else {
		print "Node Type '".$object."'\n";
	}
}


# -------------------------------------------------------------------------------------------------
# Reprocess a node for StrongHelp output once its children have been processed.
#
# Param: $node			The node to process.

sub strong_close
{
	my ($node) = @_;

	my $parent = $node->getParent;
	my $object = get_value($node, 'object');

	if ($object eq 'Chapter') {
		my $previous = "";
		my $next = "";
		my $siblings = $node->getAllSiblings;

		# Find the previous and next *chapters*. This isn't the same as the
		# previous and next nodes, as chapters and literals can be interspersed
		# and we don't want to include literals.

		if (!first_node($node)) {
			my $index = $node->getIndex - 1;

			while ($index >= 0 && !node_is($siblings->[$index], 'Chapter')) {
				$index--;
			}

			if ($index >= 0) {
				$previous = "\x8f Previous: <".get_value($siblings->[$index], 'title')."=>".get_value($siblings->[$index], 'file').">";
			}
		}

		if (!last_node($node)) {
			my $index = $node->getIndex + 1;

			while ($index < $node->getParent->getChildCount && !node_is($siblings->[$index], 'Chapter')) {
				$index++;
			}

			if ($index < $node->getParent->getChildCount) {
				$next = "\x8f Next: <".get_value($siblings->[$index], 'title')."=>".get_value($siblings->[$index], 'file').">";
			}
		}

		print OUTPUT "\n";
		print OUTPUT "#Indent\n";
		print OUTPUT "#Line\n";
		print OUTPUT $previous . (($previous ne "" && $next ne "") ? "  " : "") . $next . "\n";

		close(OUTPUT);
	} elsif ($object eq 'List') {
		print OUTPUT "#Indent\n";
		print OUTPUT strong_closing_nl($node);
	} elsif ($object eq 'ListItem') {
#		print OUTPUT "</li>".html_closing_nl($node);
	} elsif ($object eq 'CodeBlock') {
		print OUTPUT "#F\n";
		print OUTPUT "#Indent\n";
		print OUTPUT strong_closing_nl($node);
	} elsif ($object eq 'Box') {
		print OUTPUT "#F\n";
		print OUTPUT "#Indent\n";
		print OUTPUT strong_closing_nl($node);
	} elsif ($object eq 'Definition' || $object eq 'ComDef') {
		print OUTPUT "#Indent\n";
		print OUTPUT strong_closing_nl($node);
	}
}


# -------------------------------------------------------------------------------------------------
# Process a line of text from the file, parsing any in-line commands and formatting it for
# StrongHelp format output.
#
# Param: $node			The node whose contents is to be processed.
# Return: 			The formatted line.

sub strong_format_line
{
	my ($node) = @_;

	my $parent = $node->getParent;
	my $line = get_value($node, 'content');

	$line =~ s/<cite>(.*?)<\/cite>/{f\/:$1}/g;		# Citation - no effect
	$line =~ s/<code>(.*?)<\/code>/{fcode:$1}/g;		# Typed - enclose in ""
	$line =~ s/<command>(.*?)<\/command>/{fcode:$1}/g;	# Typed - enclose in ""
	$line =~ s/<em>(.*?)<\/em>/{f\/:$1}/g;			# Emphasis - To Upper
	$line =~ s/<entry>(.*?)<\/entry>/{fcode:$1}/g;		# User entry - enclose in ""
	$line =~ s/<file>(.*?)<\/file>/{f\/:$1}/g;		# Filename - no effect
	$line =~ s/<icon>(.*?)<\/icon>/{f*:$1}/g;		# Icon labels - enclose in ''
	$line =~ s/<key>(.*?)<\/key>/ucfirst $1/eg;		# Key names - initial capital
	$line =~ s/<menu>(.*?)<\/menu>/\{f*\}$1\{f\}/g;		# Menu entries - enclose in ''
	$line =~ s/<mouse>(.*?)<\/mouse>/ucfirst $1/eg;		# Mouse buttons - initial capital
	$line =~ s/<param>(.*?)<\/param>/{fcode:$1}/g;		# Parameter - code
	$line =~ s/<strong>(.*?)<\/strong>/{f*:$1}/g;		# Strong Emphasis - To Upper
	$line =~ s/<window>(.*?)<\/window>/{f*:$1}/g;		# Window names - no effect

	$line =~ s/([\\#])/\\$1/g;				# Any \s in the line must be escaped to \\.

	# Convert all the hyperlinks into StrongHelp format.

	while ($line =~ /<link ref="(.*?)">(.*?)<\/link>/) {
		my $link_prefix = $`;
		my $link_ref = $1;
		my $link_text = $2;
		my $link_postfix = $';

		if ($link_ref =~ /^http:/) {
			$link_ref = "#url $link_ref";
		}

		$line = "$link_prefix<$link_text=>$link_ref>$link_postfix";
	}

	# Convert entities into their target characters.

	$line = substitute_entities($line, %strong_entities);

	# Output the line of text.

	return $line . "\n";
}


# -------------------------------------------------------------------------------------------------
# Scan back up the tree and calculate the required indent value for the current node in StrongHelp
# output mode.
#
# Param: $node			The node to process
# Return			The required #Indent value.

sub strong_indent
{
	my ($node) = @_;
	my $indent = 0;

	while ($node ne Tree::Simple->ROOT) {
		if (defined(get_value($node, 'indent'))) {
			$indent += get_value($node, 'indent');
		}
		$node = $node->getParent;
	}

	return $indent;
}


# -------------------------------------------------------------------------------------------------
# Return a newline for trailing after a node.
#
# Param: $node			The node to process
# Return			The required newline value.

sub strong_closing_nl
{
	my ($node) = @_;
	my $newline = "";

	if (!node_is($node->getParent, 'List', 'ListItem', 'CodeBlock') && !last_node($node)) {
		$newline = "\n";
	}

	return $newline;
}


# -------------------------------------------------------------------------------------------------
# Process a node for HTML output.
#
# Param: $node			The node to process.

sub html_open
{
	my ($node) = @_;
	my $parent = $node->getParent;
	my $object = $node->getNodeValue()->{'object'};

	if ($object eq 'Literal') {
		print OUTPUT get_value($node, 'content');
	} elsif ($object eq 'Chapter') {
		print OUTPUT "\n<div><a name=\"".get_value($node, 'file')."\"></a><h2>".get_value($node, 'title')."</h2>\n";
	} elsif ($object eq 'Subhead') {
		print OUTPUT "\n<h3>".get_value($node, 'title')."</h3>\n";
	} elsif ($object eq 'List') {
		if (get_value($node, 'type') == LIST_NUMERIC) {
			print OUTPUT html_opening_nl($node)."<ol type=\"1\">";
		} elsif (get_value($node, 'type') == LIST_UPPER) {
			print OUTPUT html_opening_nl($node)."<ol type=\"A\">";
		} elsif (get_value($node, 'type') == LIST_LOWER) {
			print OUTPUT html_opening_nl($node)."<ol type=\"a\">";
		} else {
			print OUTPUT html_opening_nl($node)."<ul>";
		}
	} elsif ($object eq 'ListItem') {
		print OUTPUT html_opening_nl($node)."<li>";
	} elsif ($object eq 'CodeBlock') {
		print OUTPUT html_opening_nl($node)."<pre>";
	} elsif ($object eq 'Box') {
		print OUTPUT html_opening_nl($node)."<div style=\"margin-left: 3em; padding: 0 0 0 52px; border-left: 5px solid gray; overflow: hidden;\">";
		if (lc(get_value($node, 'type')) eq 'info') {
			print OUTPUT "<img src=\"".$html_core_image_base."info.png\" width=32 height=32 style=\"float: left; margin-left: -42px; margin-top: 0em; padding-top: 0em;\">";
		} elsif (lc(get_value($node, 'type')) eq 'warning') {
			print OUTPUT "<img src=\"".$html_core_image_base."warning.png\" width=32 height=29 style=\"float: left; margin-left: -42px; margin-top: 0em; padding-top: 0em;\">";
		}
	} elsif ($object eq 'Definition') {
		print OUTPUT html_opening_nl($node)."<dl><dt><b>".substitute_entities(get_value($node, 'target'), %html_entities)."</b></dt>\n<dd>";
	} elsif ($object eq 'ComDef') {
		my $command = html_opening_nl($node);
		if (defined(get_value($node, 'target'))) {
			$command .= "<dl><dt><b>".get_value($node, 'target')."</b>";
		} else {
			$command .= "<dl><dt><b>Command</b>";
		}
		if (defined(get_value($node, 'params'))) {
			$command .= " <i>".get_value($node, 'params')."</i>";
		}
		$command .= "</dt>\n<dd>";
		print OUTPUT substitute_entities($command, %html_entities);
	} elsif ($object eq 'Paragraph') {
		my $line = html_format_line($node);

		print OUTPUT html_opening_nl($node).html_opening_p($node).$line.html_closing_p($node).html_closing_nl($node);
	} else {
		print "Node Type '".$object."'\n";
	}
}


# -------------------------------------------------------------------------------------------------
# Reprocess a node for HTML output once its children have been processed.
#
# Param: $node			The node to process.

sub html_close {
	my ($node) = @_;

	my $value = $node->getNodeValue();
	my $object = $value->{'object'};

	if ($object eq 'Chapter') {
		print OUTPUT "</div>\n";
	} elsif ($object eq 'List') {
		if ($value->{'type'} == LIST_BULLET) {
			print OUTPUT "</ul>\n";
		} else {
			print OUTPUT "</ol>\n";
		}
	} elsif ($object eq 'ListItem') {
		print OUTPUT "</li>".html_closing_nl($node);
	} elsif ($object eq 'CodeBlock') {
		print OUTPUT "</pre>".html_closing_nl($node);
	} elsif ($object eq 'Box') {
		print OUTPUT "</div>".html_closing_nl($node);
	} elsif ($object eq 'Definition' || $object eq 'ComDef') {
		print OUTPUT "</dd></dl>".html_closing_nl($node);
	}
}


# -------------------------------------------------------------------------------------------------
# Process a line of text from the file, parsing any in-line commands and formatting it for
# HTML output.
#
# Param: $node			The node whose contents is to be processed.
# Return: 			The formatted line.

sub html_format_line
{
	my ($node) = @_;

	my $line = get_value($node, 'content');

	# Any entities that are valid in HTML just get left as-is.

	$line =~ s/<command>(.*?)<\/command>/<code>$1<\/code>/g;	# Inline code - enclose in ""
	$line =~ s/<entry>(.*?)<\/entry>/<tt>$1<\/tt>/g;		# User entry
	$line =~ s/<file>(.*?)<\/file>/<i>$1<\/i>/g;			# Filename - no effect
	$line =~ s/<icon>(.*?)<\/icon>/<b>$1<\/b>/g;			# Icon labels - enclose in ''
	$line =~ s/<key>(.*?)<\/key>/ucfirst $1/eg;			# Key names - initial capital
	$line =~ s/<menu>(.*?)<\/menu>/<b>$1<\/b>/g;			# Menu entries - enclose in ''
	$line =~ s/<mouse>(.*?)<\/mouse>/ucfirst $1/eg;			# Mouse buttons - initial capital
	$line =~ s/<param>(.*?)<\/param>/<tt>$1<\/tt>/g;
	$line =~ s/<window>(.*?)<\/window>/<b>$1<\/b>/g;		# Window names - no effect

	# Convert all the hyperlinks into HTML format.

	while ($line =~ /<link ref="#url (.*?)">(.*?)<\/link>/) {
		$line = "$`<a href=\"$1\">$2</a>$'";
	}

	while ($line =~ /<link ref="(.*?)">(.*?)<\/link>/) {
		$line = "$`<a href=\"#$1\">$2</a>$'";
	}

	# Sort out any non-standard entities into something that's valid HTML.

	$line = substitute_entities($line, %html_entities);

	# Remove any trailing whitespace from the line

	$line =~ s/\s*$//;

	return $line;
}


# -------------------------------------------------------------------------------------------------
# Return an opening \n suitable for a node's paragraph.
#
# Param: $node			The node to return the tag for.
# Return: 			The required newline.

sub html_opening_nl
{
	my ($node) = @_;

	if (node_is($node->getParent, 'CodeBlock')) {
		return "";
	}

	return (first_node($node) && !node_is($node->getParent, 'Chapter')) ? "" : "\n";
}


# -------------------------------------------------------------------------------------------------
# Return a closing \n suitable for a node's paragraph.
#
# Param: $node			The node to return the tag for.
# Return: 			The required newline.

sub html_closing_nl
{
	my ($node) = @_;

	return (last_node($node)) ? "" : "\n";
}


# -------------------------------------------------------------------------------------------------
# Return an opening <p> tag suitable for a node's paragraph.
#
# Param: $node			The node to return the tag for.
# Return: 			The required <p> tag.

sub html_opening_p
{
	my ($node) = @_;

	if (node_is($node->getParent, 'CodeBlock')) {
		return "";
	}

	if (!node_is($node->getParent, 'ListItem', 'Box', 'Definition', 'ComDef')) {
		return "</p>";
	}

	my $margins = "";

	if (first_node($node) && last_node($node)) {
		$margins = " style=\"margin-top: 0em; margin-bottom: 0em;\"";
	} elsif (first_node($node)) {
		$margins = " style=\"margin-top: 0em;\"";
	} elsif (last_node($node)) {
		$margins = " style=\"margin-bottom: 0em;\"";
	}

	return "<p".$margins.">";

}


# -------------------------------------------------------------------------------------------------
# Return a closing </p> tag suitable for a node's paragraph.
#
# Param: $node			The node to return the tag for.
# Return: 			The required </p> tag.

sub html_closing_p
{
	my ($node) = @_;

	return (node_is($node->getParent, 'CodeBlock')) ? "" : "</p>";
}


# -------------------------------------------------------------------------------------------------
# Replace any entities (of the form &...;) in the string with substitutions from the supplied
# list.  Unknown entities (ie. those not in the supplied hash) are left intact.

sub substitute_entities
{
	my ($line, %entities) = @_;

	foreach my $entity (keys %entities) {
		my $sub = $entities{$entity};

		while ($line =~ /&$entity;/) {
			$line = $`.$sub.$';
		}
	}

	return $line;
}


# -------------------------------------------------------------------------------------------------
# Test to see if a node is the first of its parent's childen
#
# Param: $node			The node to test.
# Return:			TRUE if the node is the first child; else FALSE.

sub first_node
{
	my ($node) = @_;

	if ($node->getDepth == 0) {
		return FALSE;
	}

	if ($node->getIndex != 0) {
		return FALSE;
	}

	return TRUE;
}


# -------------------------------------------------------------------------------------------------
# Test to see if a node is the last of its parent's childen
#
# Param: $node			The node to test.
# Return:			TRUE if the node is the last child; else FALSE.

sub last_node
{
	my ($node) = @_;

	if ($node->getDepth == 0) {
		return FALSE;
	}

	if ($node->getIndex != $node->getParent->getChildCount - 1) {
		return FALSE;
	}

	return TRUE;
}


# -------------------------------------------------------------------------------------------------
# Test to see if a node is one of the supplied types.
#
# Param: $node			The node to test.
# Param: @types			A list of types to test against.
# Return:			TRUE if the node is one of the supplied types; else FALSE.

sub node_is
{
	my ($node, @types) = @_;

	my $found = FALSE;

	foreach my $type (@types) {
		if (get_value($node, 'object') eq $type) {
			$found = TRUE;
			last;
		}
	}

	return $found;
}


# -------------------------------------------------------------------------------------------------
# Return the value from a node's parameter hash entry.
#
# Param: $node			The node to target.
# Param: $parameter		The parameter to return.
# Return:			The value of the parameter.

sub get_value
{
	my ($node, $parameter) = @_;

	return $node->getNodeValue()->{$parameter};
}


# -------------------------------------------------------------------------------------------------
# Store a value into a node's parameter hash.
#
# Param: $node			The node to target.
# Param: $parameter		The parameter to set.

sub set_value
{
	my ($node, $parameter, $value) = @_;

	$node->getNodeValue()->{$parameter} = $value;
}


# -------------------------------------------------------------------------------------------------
# Parse a tag, returning a hash containing a set of attribute/value pairs.
# The tag is given an attribute name "tag_name".
#
# Param: $tag			The tag to be parsed (eg. "p name="value"").
# Return:			A hash of tag name and attribute values.

sub parse_tag
{
	my ($tag) = @_;
	my (%attributes, @items, $item, $name, $value);

	# Convert the spaces outside of quotes into \n and split on these.

	$tag =~ s/\s+([^="]*?=)/\n$1/g;
	@items = split(/\n/, $tag);

	foreach $item (@items) {
		($name, $value) = split(/=/, $item);

		if (defined($value) && $value ne "") {
			$value =~ s/^\s*"(.*)"\s*$/$1/; # Strip quotes and external whitespace.
			$attributes{$name} = $value;
		} else {
			$attributes{'tag_name'} = $name;
		}
	}

	return %attributes;
}
